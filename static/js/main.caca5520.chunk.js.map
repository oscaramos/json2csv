{"version":3,"sources":["components/upload-button/UploadJson.jsx","components/json-container/JSONContainer.jsx","components/convert-button/ConvertButton.jsx","components/download-file/downloadFile.js","components/csv-container/CSVContainer.jsx","components/form-container/FormContainer.jsx","components/json2csv/json2csv.component.js","App.js","components/error-modal/ErrorModal.jsx","components/error-boundary/ErrorBoundary.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","input","display","UploadJson","fileReader","onInputFile","handleFileRead","content","result","classes","className","type","accept","id","onChange","e","file","target","files","FileReader","onloadend","readAsText","htmlFor","Button","variant","color","component","JsonContainer","value","onChangeForm","Grid","container","justify","item","xs","TextareaAutosize","aria-label","placeholder","rowsMin","style","width","name","ConvertButton","props","endIcon","downloadFile","data","filename","fileDownload","CSVContainer","onClear","useState","error","setError","IconButton","onClick","FormContainer","state","onConvertClick","alignItems","minHeight","Paper","elevation","height","json","csv","json2csv","obj","JSON","parse","keys","Object","join","values","Error","App","stringify","a","b","c","onJSON2CSV","setState","this","React","Component","getModalStyle","top","left","transform","paper","position","backgroundColor","palette","background","border","boxShadow","shadows","padding","ErrorModal","open","handleClose","errormsg","modalStyle","body","textAlign","Modal","onClose","aria-labelledby","aria-describedby","ErrorBoundary","hasError","info","console","log","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.caca5520.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nconst UploadJson = ({ onInputFile }) => {\r\n  let fileReader;\r\n\r\n  const handleFileRead = () => {\r\n    const content = fileReader.result;\r\n    onInputFile(content);\r\n  };\r\n\r\n  const handleFileChosen = (file) => {\r\n    fileReader = new FileReader();\r\n    fileReader.onloadend = handleFileRead;\r\n    fileReader.readAsText(file);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <input\r\n        type='file'\r\n        accept='.json'\r\n        className={classes.input}\r\n        id='contained-button-file'\r\n        onChange={e => handleFileChosen(e.target.files[0])}\r\n      />\r\n      <label htmlFor='contained-button-file'>\r\n        <Button variant='contained' color='primary' component='span'>\r\n          Upload\r\n        </Button>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default UploadJson;","import TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport UploadJson from \"../upload-button/UploadJson\";\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst JsonContainer = ({ value, onChangeForm, onInputFile }) => (\r\n  <Grid container spacing={2} justify='center'>\r\n    <Grid container item xs='12' justify='center'>\r\n      <TextareaAutosize aria-label='empty textarea' placeholder='JSON' rowsMin={20} style={{ width: '30vh' }}\r\n                        value={value} onChange={onChangeForm} name='json' />\r\n    </Grid>\r\n    <Grid container item xs='12' justify='center'>\r\n      <UploadJson onInputFile={onInputFile}/>\r\n    </Grid>\r\n  </Grid>\r\n);\r\n\r\nexport default JsonContainer;","import Button from \"@material-ui/core/Button\";\r\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\r\nimport React from \"react\";\r\n\r\nconst ConvertButton = props => (\r\n  <Button variant='contained' color='primary' endIcon={<ArrowForwardIcon />} {...props}>\r\n    Convert\r\n  </Button>);\r\n\r\nexport default ConvertButton;","import fileDownload from \"js-file-download\";\r\n\r\nconst downloadFile = (data, filename) => {\r\n  fileDownload(data, filename);\r\n}\r\n\r\nexport default downloadFile;\r\n","import React, { useState } from \"react\";\r\n\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport downloadFile from \"../download-file/downloadFile\";\r\n\r\nconst CSVContainer = ({ value, onChangeForm, onClear}) => {\r\n  const [error, setError] = useState('');\r\n\r\n  const onDownloadFile = (data, filename) => {\r\n    if(data)\r\n      downloadFile(data, filename);\r\n    else\r\n      setError('There are no CSV');\r\n  };\r\n\r\n  if(error) throw error;\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Grid container justify='center'>\r\n          <TextareaAutosize aria-label='empty textarea' placeholder='CSV' rowsMin={20} style={{ width: '30vh' }}\r\n                            value={value} onChange={onChangeForm} name='csv' />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Grid container justify='center'>\r\n          <IconButton aria-label='download' onClick={() => onDownloadFile(value, \"output.csv\")}>\r\n            <DownloadIcon />\r\n          </IconButton>\r\n\r\n          <IconButton aria-label='copy-clipboard'>\r\n            <FileCopyIcon />\r\n          </IconButton>\r\n\r\n          <IconButton aria-label='delete' onClick={onClear}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>);\r\n};\r\n\r\nexport default CSVContainer;","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport JsonContainer from \"../json-container/JSONContainer\";\r\nimport ConvertButton from \"../convert-button/ConvertButton\";\r\nimport CSVContainer from \"../csv-container/CSVContainer\";\r\n\r\nexport const FormContainer = ({ state, onChangeForm, onConvertClick, onClear, onInputFile }) => (\r\n  <Grid container justify='center' alignItems='center' style={{ minHeight: \"100vh\" }}>\r\n    <Grid item xs={8}>\r\n      <Paper elevation={4} style={{ height: \"50vh\" }}>\r\n        <Grid container justify='center' alignItems='center' style={{ height: \"50vh\" }}>\r\n          <Grid item xs={5}>\r\n            <JsonContainer value={state.json} onChangeForm={onChangeForm} onInputFile={onInputFile}/>\r\n          </Grid>\r\n          <Grid container item xs={1} justify='center' alignItems='center'>\r\n            <ConvertButton onClick={onConvertClick} />\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <CSVContainer value={state.csv} onChangeForm={onChangeForm} onClear={onClear}/>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  </Grid>);\r\n\r\nexport default FormContainer;","const json2csv = input => {\r\n  try {\r\n    if (!input || input === '{}')\r\n      return '';\r\n    const obj = JSON.parse(input);\r\n    const keys = Object.keys(obj).join(',');\r\n    const values = Object.values(obj).join(',');\r\n    return `${keys}\\n${values}`;\r\n  } catch (e) {\r\n    throw Error('Invalid JSON');\r\n  }\r\n};\r\n\r\nexport default json2csv;","import React from 'react';\nimport FormContainer from \"./components/form-container/FormContainer\";\nimport json2csv from \"./components/json2csv/json2csv.component\";\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    json: JSON.stringify({ a: \"A\", b: \"B\", c: \"C\" }, null, 4),\n    csv: '',\n    error: ''\n  }\n\n  onJSON2CSV = () => {\n    try {\n      this.setState({ csv: json2csv(this.state.json) })\n    } catch (e) {\n      this.setState({ error: 'Cant convert Json2Csv' });\n    }\n  }\n\n  onChangeForm = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  onClear = () => {\n    this.setState({\n      json: '',\n      csv: ''\n    });\n  }\n\n  onInputFile = (content) => {\n    this.setState({ json: content });\n  }\n\n  render() {\n    if (this.state.error) throw this.state.error;\n    return (\n      <div>\n        <FormContainer state={this.state}\n                       onChangeForm={this.onChangeForm}\n                       onConvertClick={this.onJSON2CSV}\n                       onClear={this.onClear}\n                       onInputFile={this.onInputFile} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\nconst getModalStyle = () => {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function ErrorModal({open, handleClose, errormsg }) {\r\n  const classes = useStyles();\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n\r\n  const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <h2 id=\"simple-modal-title\" style={{textAlign: 'center'}}>{errormsg}</h2>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {body}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport ErrorModal from \"../error-modal/ErrorModal\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false, error: ''};\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    console.log(error);\r\n    console.log(info);\r\n    this.setState({ hasError: true, error});\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({ hasError: false });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <ErrorModal open\r\n                         handleClose={this.handleClose}\r\n                         errormsg={this.state.error} />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport ErrorBoundary from \"./components/error-boundary/ErrorBoundary\";\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <App />\n    </ErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}